<importbean bean="/atg/dynamo/droplet/Switch"> 
<importbean bean="/atg/dynamo/droplet/IsEmpty">

<HTML> 
<head>
<link rel="stylesheet" type="text/css" href="/atg/dynamo/admin/admin.css">
<TITLE>Password Management</TITLE>
</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#00214A" VLINK="#637DA6" LINK="#E87F02">
<div id="oracleATGbrand">ATG Web Commerce</div>
<p>
<a href="/">admin</a>/Change Password<p>

<H1>Password Management</H1>
<TABLE width="400">
<TR><TD>	
<HR>
<P> This form changes passwords for users of the ATG Control Center or Web
Administration interface. One must specify the current password for the account to be changed in
order to update the password.
</P>
<HR>
</TD>
</TR>
</TABLE>


<java type="import"> atg.security.* atg.repository.* </java>

<droplet bean="Switch">
   <param name="value" value="param:flag">
      <oparam name="true">
         <java>/* Check to see if a username was specified */
         </java>
         <droplet bean="IsEmpty">
         <param name="value" value="param:username">
       <oparam name="true">
       <LI>
       <font color="red">Username for account was not specified
       </font>
       <BR>
       </oparam>
</droplet>

<java>/* Check to see if the current password was specified */</java>

<droplet bean="IsEmpty">
  <param name="value" value="param:current">
     <oparam name="true">
     <LI>
     <font color="red">Please enter the current password for the 
       <valueof param="username"/> user
     </font>
     <BR>
     </oparam>
</droplet>

                
<java>/* Check to see if a new password was specified */ </java>
<droplet bean="IsEmpty">
   <param name="value" value="param:newpass">
      <oparam name="true">
      <LI>
      <font color="red">Please enter a new password
      </font>
      <BR>
      </oparam>
</droplet>

<java>/* Check to see if the password was confirmed */ </java>
<droplet bean="IsEmpty">
  <param name="value" value="param:confirm">
     <oparam name="true">
     <LI>
     <font color="red">You need to confirm the new password
     </font>
     <BR>
     </oparam>
</droplet>

<java>
String username = request.getParameter("username"); 
String current = request.getParameter("current");
String newpass = request.getParameter("newpass");
String confirm = request.getParameter("confirm");

// make sure that all parameters were passed in
if ((username == null) || (username.equals("")) || 
     (current == null) || (current.equals("")) ||
     (newpass == null) || (newpass.equals("")) ||
     (confirm == null) || (confirm.equals(""))) {
 // something is amiss (the error checking above will inform the user)
 // so we won't change the password
} 
else { 
  // verify thatthe user exists
  RepositoryAccountManager ram = (RepositoryAccountManager) request.resolveName("/atg/dynamo/security/AdminAccountManager");
  Account acct = ram.getAccount(username);
  PasswordHasher ph= ram.getPasswordHasher();      
  if (acct == null)
    out.println("<LI><FONT color=\"red\">User " + username + " was not found.");
  else {
    String passwordForLogin = ph.hashPasswordForLogin(current);
    String hashedPassword = acct.getAttribute(ram.getPasswordProperty());
    Object hashKey = ph.getPasswordHashKey();
    boolean validPassword = false;
    if(ph instanceof PasswordHasher2) {
      passwordForLogin = ((PasswordHasher2) ph).hashPasswordForLogin(username, current);
      validPassword = ((PasswordHasher2) ph).checkPassword(username, passwordForLogin, hashedPassword, hashKey);
    }
    else {
      validPassword = ph.checkPassword(passwordForLogin, hashedPassword, hashKey);
    }
    // we need to check to make sure the current password provided is correct
    if (!validPassword){
      // the password provided does not match
      out.println("<LI><FONT color=\"red\">Current password provided does not match the user's password. Please try again.");
    } 
    else {
	  // check to make sure that the new password does not equal the current password. 
	  if (newpass.equals(current))
        out.println("<LI><FONT color=\"red\">New password equals current password. Please try again.");
      else {
	      // check to make sure that the confirm password matches the new password

    	  if (!newpass.equals(confirm))
        	out.println("<LI><FONT color=\"red\">New password does not match confirm password. Please try again.");
      	  else {
	      	// run the password through the strong password checker
    	  	PasswordRuleChecker pwdChecker = (PasswordRuleChecker) request.resolveName("/atg/dynamo/security/passwordchecker/AdminPasswordRuleChecker");
	    	if (pwdChecker.isEnabled() && !pwdChecker.checkRules(newpass, null))  {
		  out.println("<LI><FONT color=\"red\">" + pwdChecker.getLastRuleCheckedDescription() + ". Please try again.");
		  
		} else {	      
	    	  // change the password since everything is acceptable
	    	  String password = null;
                  if(ph instanceof PasswordHasher2) {
                    password = ((PasswordHasher2) ph).encryptPassword(username, newpass);
                  }
                  else {
                    password = ph.encryptPassword(newpass);
                  }
        	  acct.setAttribute(ram.getPasswordProperty(), password);
		
		  // update the timestamp for the last password update to now
	          MutableRepositoryItem ri = (MutableRepositoryItem)ram.getAccountItem(username, ram.getLoginDescriptorName());
		  Calendar cal = Calendar.getInstance();
		  ri.setPropertyValue(ram.getLastPasswordUpdatePropertyName(), cal.getTime() );
		  
		  // add the current password to the previousl password array		
	    	  PreviousNPasswordManager prevPwdMgr = (PreviousNPasswordManager) request.resolveName("/atg/dynamo/security/passwordchecker/AdminPreviousNPasswordManager");
                  String hashedCurrent = null;
                  if(ph instanceof PasswordHasher2) {
                    hashedCurrent = ((PasswordHasher2) ph).encryptPassword(username, current);
                  } 
                  else {
                    hashedCurrent = ph.encryptPassword(current);
                  }
		  prevPwdMgr.updatePreviousPasswordsProperty(ri, hashedCurrent); 

		  // flag that this session has a non-expired password
	    	  ExpiredPasswordAdminServlet prevPwdAdminServlet = (ExpiredPasswordAdminServlet) request.resolveName("/atg/dynamo/servlet/adminpipeline/ExpiredPasswordAdminServlet");
		  request.getSession().setAttribute(prevPwdAdminServlet.getPasswordExpiredSessionParam(), new Boolean(false));

		  out.println("<LI><FONT color=\"green\">Password for user " + username + " was successfully updated");
      
    		}
    	  }
       }
    }
  }               
}
</java>

</oparam> 
<oparam name="default">
</oparam> <!-- end default  oparam of switch droplet --> 
</droplet> <!-- end switch droplet -->

<form action="`request.getRequestURIWithQueryString()`" method="post"> <input type="hidden" name="flag" value="true">
<table>
<tr><td><img src="/atg/dynamo/admin/images/clear.gif" width="50"></td>
 <td>
  <table border="0"> 
   <tr><td>Username</td><td><input type="text" name="username" value="param:username"></td></tr>
   <tr><td>Current Password</td><td><input type="password" name="current" value="param:current"></td></tr>
   <tr><td>New Password</td><td><input type="password" name="newpass" value="param:newpass"></td></tr>
   <tr><td>Confirm Password</td><td><input type="password" name="confirm" value="param:confirm"></td></tr>
   <tr><td></td><td>  <input type="submit"></td></tr>
  </table>

 </form>
</td></tr>
</table>
</body>
</html>
<java>/* @version $Id: //product/DAS/version/10.2/release/DAS/admin/atg/dynamo/admin/en/change-password.jhtml#1 $$Change: 735822 $*/</java>
