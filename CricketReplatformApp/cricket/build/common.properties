
# ---------------------------------------------------------------------------------
# Dynamo enviroment properties.  Recommended that you set DYNAMO_HOME AND DAS_ROOT
# as environment properties for your OS.  Or you can set things here...
#
dynamo.home=/Users/agudimetla/ATG/ATG10.2
dynamo.root.dir=${dynamo.home}/..
weblogic.server.dir=/Users/agudimetla/weblogic/Oracle/Middleware/wlserver_10.3

#jboss.template.server.dir=${jboss.server.dir}/default/

# ---------------------------------------------------------------------------------
# This sets the order in which submodules are called when calling a main task 
# such as 'all', 'build', etc...  Note the reverse must also be declared to support
# such tasks as sql drops and creates.
# 
modules.build.order=common/build.xml,storefront/build.xml,webservices/build.xml,publishing/build.xml
#used later#env/dev/build.xml,env/dev-ca/build.xml,env/qa/build.xml,env/qa-ca/build.xml,env/qa-stage/build.xml,env/perf/build.xml,env/perf-ca/build.xml,env/prod/build.xml,env/prod-ca/build.xml,env/prod-stage/build.xml
reverse.build.order=publishing/build.xml,webservices/build.xml,storefront/build.xml,common/build.xml
ca.build.file=publishing/build.xml



# ---------------------------------------------------------------------------------
# Default database properties.  These are for use by engineers who are running
# their own database schemas or responsible for environment databases.  
# These are used by the createtables, droptables, and inittables tasks
#
database.type=oracle

# ATG Schemas for Commerce
jdbc.cataloga.user=ATG_CATA
jdbc.cataloga.password=Welcome1
jdbc.catalogb.user=ATG_CATB
jdbc.catalogb.password=Welcome1
jdbc.core.user=ATG_CORE
jdbc.core.password=Welcome1

# CA schemas
jdbc.pub.user=ATG_PUB
jdbc.pub.password=Welcome1

# this is used for filtering script folders
jdbc.url=jdbc:oracle:thin:@localhost:1521:XE

# this is the SID if you are on oracle don't let the term jdbc.hostname fool you
#
jdbc.hostname=XE

sql.create.users.ddl=${basedir}/data/create_users.sql

# list of stage environment that should be included for sql tasks like droptables, createtables etc.
# build will iterate through list of global.stage.env and will perform sql tasks on each comma separated
# environments.
#
# each environment must have jdbc.hostname, jdbc.core.user, jdbc.core.password, jdbc.cata.user, jdbc.cata.password 
# , jdbc.catb.user, jdbc.catb.password set.
#
# e.g. sample configuration is as follows, for multiple environments use comma separated list.
# 
# global.stage.env=env.stage
# env.stage.jdbc.hostname=<JDBC_HOST>
# env.stage.jdbc.core.user=<JDBC_USER_CORE>
# env.stage.jdbc.core.password=<JDBC_PASSWORD_CORE>
# env.stage.jdbc.cata.user=<JDBC_USER_CATA_USER>
# env.stage.jdbc.cata.password=<JDBC_PASSWORD_CATA_PASSWORD>
# env.stage.jdbc.catb.user=<JDBC_USER_CATB_USER>
# env.stage.jdbc.catb.password=<JDBC_PASSWORD_CATB_PASSWORD>
global.stage.env=


# configuration required to auto setup work flows and target sites for content administration
# 
# global.topology.config=<topology.envname> indicates the active configuration to be used for auto setup and is
# used as the key to identify the site description, enabled property and agents available for the given environment
# e.g topology.config can take values like topology.dev, topology.cm, topology.qa, topology.uat and topology.prod
# corresponding suggested values for <topology.envname>.description are Dev, CM, QA, UAT and PROD
# <topology.envname>.enabled a boolean property (true|false) indicates if the configuration is enabled or not.
# <topology.envname>.agents.(prod|stage) is used to setup agents. The value for this is in the form of <hostname>:<rmiport>
# where hostname is the target's hostname and rmi port is the rmiPort of the target.
#
# sample configuration for local environment
#
# global.topology.config=topology.local
# topology.local.description=Local
# topology.local.enabled=true
# topology.local.agents.prod=localhost:8060
# topology.local.agents.stage=localhost:28060


# ---------------------------------------------------------------------------------
# Identifies the installation root for the Project.  All the applications 
# constructed for the project are loaded into this installation directory.
# This installation directory identifies itself as an ATG-Install-Unit which allows
# any modules within it to require ATG modules from different installation roots.
# For example, the ATG CampaignOptimizer product is a separate install unit.
#  
# Having a separate installation root for this project allows us to keep all 
# custom application modules together and still maintain references to modules 
# within other ATG install units.
#
default.install.unit=CRICKET

# ---------------------------------------------------------------------------------
# Location of any server specific configuration that should be deployed
#
global.server.dir=../../servers


#----------------------------------------------------------------------------------
# Tells the clean task to exclude compiled jsps from deletion
# Comment this out if you want it to clean them too
# 
clean.task.excludes=**/jspbuild/**

#----------------------------------------------------------------------------------
# Indicates whether or not the classes and configuration files should be installed
# in exploded or jarred format
# 
jar.classes=true
jar.configs=false

# ---------------------------------------------------------------------------------
# This is the directory the ANT task menu will used to write the javadocs
# for all defined submodules 
# 
# This should be overridden to match your local environment needs.
#
global.javadoc.dir=../../documents/javadocs

# Javadoc external references
#
jdk.docs.dir=${jdk.home}/docs/api
dynamo.docs.dir=${dynamo.root.dir}/manuals/dynamo/apidoc



# ---------------------------------------------------------------------------------
# base directory for development specific configuration files
# such as code check tools checkstyle and pmd.  Note the directory setting is a bit 
# counter-intuitive.  This is because checkstlye, pmd, and jalopy are all run
# from the sub-modules and not this main module.
#

# Checkstyle settings
# checkstlye.home is the directory where your checkstyle libraries are stored
# defining checkstlye.on will run checkstyle regardless of true/false value
#
checkstyle.home=${env.CHECKSTYLE_HOME}
checkstyle.on=false
checkstyle.lib.dir=${checkstyle.home}
checkstyle.rules.set=${global.etc.dir}/checkstyle/checks.xml


# PMD Settings
# pmd.home is the directory where your pmd libraries are stored
# defining pmd.on will run checkstyle regardless of true/false value
#
pmd.home=${env.PMD_HOME}
pmd.on=false
pmd.lib.dir=${pmd.home}/lib
pmd.rules.dir=${global.etc.dir}/pmd
pmd.rulesets=standard_rules.xml,atg_rules.xml
pmd.printToConsole=true
pmd.failOnRuleViolation=true


# jalopy.home is the directory where your jalopy libraries are stored
#
jalopy.home=${env.JALOPY_HOME}
jalopy.rules.dir=${global.etc.dir}/jalopy


# ---------------------------------------------------------------------------------
# Executables
#
# Sqlplus.  Why sqlplus instead of ANT's sql task?  Well for one sqlplus doesn't
# barf when it has to run a ddl file which mixes both stored procedures and table 
# creation.  The other reason is this allows the project to use sql statements
# fit for DBAs.
#
# For windows consider sqlplusw if you are having issues with sql statements that 
# relate to I18N
#
# sqlplus.win.cmd=sqlplusw
sqlplus.win.cmd=sqlplus
sqlplus.unix.cmd=sqlplus
exp.win.cmd=exp
exp.unix.cmd=exp

# ATG's Darina command to create J2EE applications
#
rundarina.win.cmd=${dynamo.home}/bin/runDarina.bat
rundarina.unix.cmd=${dynamo.home}/bin/runDarina


# ********************************************************************************
# ********************************************************************************
#
# Common values used by sub modules
#
# ********************************************************************************
# ********************************************************************************


# ---------------------------------------------------------------------------------
# Basic directory settings that identify common directory structures in each
# submodule
#
src.dir=${basedir}/src
etc.dir=${basedir}/etc
config.dir=${basedir}/config
liveconfig.dir=${basedir}/liveconfig
inf.dir=${basedir}/META-INF
lib.dir=${basedir}/lib
sql.dir=${basedir}/sql
#j2ee.dir=${basedir}/j2ee-apps
test.dir=${basedir}/test
test.lib.dir=${test.dir}/lib
test.src.dir=${test.dir}/src

# ---------------------------------------------------------------------------------
# Basic directory settings that identify the build directory structures for each
# submodule
#
build.dir=${basedir}/build
build.tempconfig.dir=${build.dir}/tempconfig
build.config.dir=${build.dir}/config
build.j2ee.dir=${build.dir}/j2ee-apps
javadoc.dir=${build.dir}/javadoc
classes.dir=${build.dir}/classes
testclasses.dir=${build.dir}/testclasses
reports.dir=${build.dir}/reports
ear.dir=${build.dir}/ear
javadoc.dir=${build.dir}/javadoc


# ********************************************************************************
# ********************************************************************************
#
# Other Tools and Features
#
# ********************************************************************************
# ********************************************************************************

# ---------------------------------------------------------------------------------
# global.preemptive.backup (default true), when set will export data from and  
# checks in to the SVN repository
global.preemptive.backup=true
global.svn.data.url=https://svn.prod.cricketcommunications.com/svn/mycricket_replatform/data
global.data.dir=${basedir}/data
global.dbbackup.dir=${global.data.dir}/dbbackup

# prompt for seed value to be used with order id space
global.prompt.order.seed=true
store.idspacesxml.path=/atg/dynamo/service/idspaces.xml

# ---------------------------------------------------------------------------------
# Settings for Building Webservice Client Stubs
#

# The Apache Axis library for generating web service skeletons and stubs
# This can be obtained from http://ws.apache.org/.  However, it is highly 
# recommended that  you use the axis version that ships with ATG.  ATG 
# provides additional facilities based explicitly upon its chosen Axis version.  
# These include ATG's Web Service security implemenation which is dependent 
# upon ATG's chosen access version.  Without the ATG axis implementation 
# you will not be able to share session across ATG web services.
#
# To recap - if you do not use ATG's axis libraries then you lose the ability 
# to share session across ATG Web Services.  In addition you lose ATG's 
# web service security mechanism (which uses ATG's Access Control Lists)
#
# Now that you've read this you have the information necessary to select 
# an axis version.  Set the axis.lib.dir to point this its location.
#
# Note that the axis-ant tasks included with this framework may not be 
# compatible with your chosen version.  Be sure to doublecheck the version
# of axis-ant.jar in the ${global.dir}/../lib directory.
#
#
# axis.lib.dir=${global.dir}/../etc/axis-1_2_1/lib
#axis.lib.dir=${dynamo.root.dir}/DAS/lib

# the place to store generated source stubs.  This is where we will store both 
# the webservice stub source and compiled class files
#
webservice.stubs.dir=${build.dir}/wsstubs



# ---------------------------------------------------------------------------------
# J2EE Build and deployment settings
#

# Define here which deployment definitions to use for the deploy task
# these are:
#
# deploy-das.xml:      This definition supplies deploy tasks for J2EE deployment on DAS
# deploy-jboss.xml:    This definition supplies deploy tasks for J2EE deployment on JBoss
# deploy-weblogic.xml: This definition supplies deploy tasks for J2EE deploymet on Weblogic
#
default.deploy.definition.file=deploy-weblogic.xml


# Tells the deploy steps to strip J2EE whitespace as a predeployment task
#
strip.j2ee.whitespace=false

# Uncommenting this tells the deploy steps to precompile the JSPs.  
# Commented out here because most development tasks won't want this.  
# This is useful only when creating a build for release.
# 
# darina.precompile.arg=-jsp-compile


# ---------------------------------------------------------------------------------
# Additional J2EE build and deployment settings when using another application
# server (other than DAS)
#

# this is used for the development deployment step "ANT devdeploy" and indentifies
# where the devdeploy task should copy the .ear file
# The default will be to put it in $DYNAMO_HOME, override in username.properties.
#
application.ear.install.dir=${weblogic.server.dir}


ears.to.assemble=ear.store,ear.store-ca,ear.store-dwl
express.ears.to.assemble=ear.production
install.ca.data=true

ear.store.filename=atg_production.ear
ear.store.destination=${weblogic.server.dir}
ear.store.modules=DafEar.Admin DPS DSS DCS.PublishingAgent ARF.base DCS.AbandonedOrderServices DAF.Endeca.Index DCS.Endeca.Index Store.Endeca.Index DAF.Endeca.Assembler PublishingAgent Store.Storefront DafEar CRICKET.common CRICKET.storefront CRICKET.webservices
ear.store.server=dev-weblogic
ear.store.liveconfig=true
ear.store.standalone=false
ear.store.pack=false
ear.store.ds.filename=${global.server.dir}/_weblogic/dev/atg-oracle-xa-ds.xml

ear.store-ca.filename=atg_publishing.ear
ear.store-ca.destination=${weblogic.server.dir}
ear.store-ca.modules=DCS-UI.Versioned BIZUI PubPortlet DafEar.Admin DCS-UI.SiteAdmin.Versioned SiteAdmin.Versioned ARF.base DCS.Versioned DCS-UI Store.EStore Store.EStore.Versioned DAF.Endeca.Index.Versioned DCS.Endeca.Index.Versioned CRICKET.publishing CRICKET.webservices
ear.store-ca.server=dev-weblogic-ca
ear.store-ca.liveconfig=true
ear.store-ca.standalone=false
ear.store-ca.pack=false
ear.store-ca.ds.filename=${global.server.dir}/_weblogic-resources/dev-ca/atg-oracle-xa-ds.xml

ear.store-dwl.filename=atg_dwloader.ear
ear.store-dwl.destination=${weblogic.server.dir}
ear.store-dwl.modules=DafEar.Admin DCS.DW DCS.PublishingAgent ARF.base
ear.store-dwl.server=dev-weblogic-dwl
ear.store-dwl.liveconfig=true
ear.store-dwl.standalone=false
ear.store-dwl.pack=false
ear.store-dwl.ds.filename=${global.server.dir}/_weblogic-resources/dev-ca/atg-oracle-xa-ds.xml

#----------------------------------------------------------------------------------
# assemble ear with layer staging option for stage workflow
#
ear.todeploy.layer-staging=true

#Express Moudles
#express.update.modules=Store,Integration,Localization
# ---------------------------------------------------------------------------------
# Test Frameworks
#

# Cactus
cactus.contextURL=http://localhost:8080/store
cactus.servletRedirectorName=ServletRedirector.jsp


# ---------------------------------------------------------------------------------
# Release Management (Application Packaging) settings
#

# Define here which packaging definition to use for the package-full task
# these are:
#
# package-das.xml:      This definition supplies packaging tasks for release to DAS
# package-jboss.xml:    This definition supplies packaging tasks for release to JBoss
# package-weblogic.xml: This definition supplies packaging tasks for release on Weblogic
#
package.definition.file=package-weblogic.xml

# startSQLRepository
atg.startsqlrepository=${dynamo.home}/bin/startSQLRepository.bat
atg.startsqlrepository.sh=${dynamo.home}/bin/startSQLRepository

# RLClient
atg.rlclient=${dynamo.home}/../RL/bin/RLClient.bat
atg.rlclient.sh=${dynamo.home}/../RL/bin/RLClient.sh
twc.rl.source.dir.path=/tmp/cricket/fa
twc.rl.manifest.file.path=/tmp/cricket/manifest/cricketfamanifest.xml

# this part defines the comand line for import and export xml data 
# this is the script server which used when importing and exporting data
server.for.import=dev-weblogic-script
module.for.import=CRICKET.env.dev
store.for.import=CRICKET.Store

server.for.export=dev-weblogic-script
module.for.export=CRICKET.common
store.for.export=CRICKET.Store

server.for.prv.export=dev-weblogic-prv-script
module.for.prv.export=CRICKET.env.dev
store.for.prv.export=CRICKET.Store

server.for.ca.export=dev-weblogic-pub-script
server.for.ca.import=dev-weblogic-pub-script
module.for.ca.import=CRICKET.publishing
module.for.ca.export=CRICKET.publishing
store.for.ca.import=CRICKET.Store
import.checkin.tag=webstore

script-server=dev-weblogic-script

# this part defined the CSC import helper server
server.for.csc.import=dev-weblogic-csc-script

# the location of data xml file to import
data.catalog.file=${basedir}/../data/catalog.xml
data.price.file=${basedir}/../data/price-data.xml
data.storeconfig.file=${basedir}/../data/store-config.xml
data.helpfulhints.file=${basedir}/../data/helpful-hints.xml
data.storecontent.file=${basedir}/../data/storecontent.xml
data.claimable.file=${basedir}/../data/claimable.xml
data.disable.rte.file=${basedir}/../data/disable-rte.xml
data.ca-NOC-users.file=${basedir}/../data/epub-NOC-role-data.xml
data.ca-users.file=${basedir}/../data/ca-users.xml
data.profile-users.file=${basedir}/../data/profile-users.xml

# the location of data xml file to export
data.exp.catalog.file=${basedir}/data/export-catalog.xml
data.exp.price.file=${basedir}/data/export-price-data.xml
data.exp.storetext.file=${basedir}/data/export-storetext.xml
data.exp.claimable.file=${basedir}/data/export-claimable.xml
data.exp.ca-users.file=${basedir}/data/export-ca-users.xml
data.exp.profile-users.file=${basedir}/data/export-profile-users.xml
data.exp.seorepository.file=${basedir}/data/export-storetext.xml
data.exp.locationrepository.file=${basedir}/data/export-location.xml
data.exp.siterepository.file=${basedir}/data/export-site.xml
data.exp.personalizationrepository.file=${basedir}/data/export-personalization.xml

data.exp.prv.catalog.file=${basedir}/data/export-catalog.xml
data.exp.prv.price.file=${basedir}/data/export-price-data.xml
data.exp.prv.storetext.file=${basedir}/data/export-storetext.xml
data.exp.prv.claimable.file=${basedir}/data/export-claimable.xml
data.exp.prv.ca-users.file=${basedir}/data/export-ca-users.xml
data.exp.prv.profile-users.file=${basedir}/data/export-profile-users.xml
data.exp.prv.seorepository.file=${basedir}/data/export-storetext.xml
data.exp.prv.locationrepository.file=${basedir}/data/export-location.xml
data.exp.prv.siterepository.file=${basedir}/data/export-site.xml
data.exp.prv.personalizationrepository.file=${basedir}/data/export-personalization.xml

# remove dev users for product build.
data.dev.ca-users.cleanup.file=${basedir}/data/remove_dev_ca_users.sql
data.dev.profile-users.cleanup.file=${basedir}/data/remove_dev_profile_users.sql

# Temp data for build change
tmp.ca-users.file=${basedir}/data/temp/ca-users.xml
tmp.profile-users.file=${basedir}/data/temp/profile-users.xml

#BCC Topology specific settings
atg.ca.env=dev
atg.production.agent1=localhost:8060