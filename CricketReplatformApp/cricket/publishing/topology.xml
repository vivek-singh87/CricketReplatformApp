<!--
 - task definitions to support auto creation of site and work flows for CA.
 - takes into consideration that a site could have a production as well as staging targets with
 - multiple agents running on it. 
 -->
<project name="topology">
  <!-- task definitions from ant contrib used by this file -->
  <taskdef name="propertycopy" classname="net.sf.antcontrib.property.PropertyCopy" classpath="${global.dir}/../lib/ant-contrib.jar"/>
  <taskdef name="math" classname="net.sf.antcontrib.math.MathTask" classpath="${global.dir}/../lib/ant-contrib.jar"/>
  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${global.dir}/../lib/ant-contrib.jar" />

  <!-- main task responsible for creating topologies -->
  <target name="createtopology" depends="-gettopologyconfigvalue,-topology-cleanup,-copy-topology-files" description="Creates topology files for Publishing Server">
    <echo>Topology creation flag global.topology.config.value=${global.topology.config.value}</echo>
    <if name="global.topology.config.value" value="true">
      <echo>Creating topology for the environment: ${topology.config.touse.description}</echo>
      <replace file="${sql.install.atg.prd.topology}" token="@environment@" value="${topology.config.touse.description}" />    	
      <replace file="${sql.install.atg.stg.topology}" token="@environment@" value="${topology.config.touse.description}" />

      <!-- production target -->
      <concat append="false" destfile="${tmp.transportid.file}">${global.topology.prd.initvalue}</concat>
      <foreach list="${topology.config.touse.agents.prod}" delimiter="," trim="true" param="current.transport.url" target="-loop-generate-topology-sql">
		<param name="destination.type" value="prd" />
      </foreach>
      
      <!-- stage target -->
      <condition property="execute.stage" else="false">
        <and>
          <isset property="topology.config.touse.agents.stage" />
          <not>
           <equals arg1="${topology.config.touse.agents.stage}" arg2="" trim="true" />
          </not>
        </and>  
      </condition>
      <if name="execute.stage" value="true">
      	<concat append="false" destfile="${tmp.transportid.file}">${global.topology.stg.initvalue}</concat>      	
        <foreach list="${topology.config.touse.agents.stage}" delimiter="," trim="true" param="current.transport.url" target="-loop-generate-topology-sql">
		  <param name="destination.type" value="stg" />
        </foreach>
        <concat append="true" destfile="${sql.install.atg.prd.topology}" fixlastline="true">
          <header>
          	
          </header>
          <filelist files="${sql.install.atg.stg.topology}" />
        </concat>      	
      </if>
      
      <!-- everything in place, run topology sql against db -->
      <ant target="-performpubsql">
        <property name="sql.ddl.file" value="${sql.install.atg.prd.topology}" />
      </ant>
    <else>
      <echo>ignoring topology creation for CA environment</echo>
    </else>
    </if>
  </target>
  
  <!-- clean up any residue from previous builds -->
  <target name="-topology-cleanup">
    <delete failonerror="true">
      <fileset dir="${sql.install.dir}">
        <include name="topology*.sql" />
        <include name="tmp.*.sql" />
        <include name="tmp.*.properties" />
      </fileset>
    </delete>
  </target>
  
  <!-- copy, create required files -->
  <target name="-copy-topology-files">
    <copy overwrite="true" verbose="true" todir="${sql.install.dir}" failonerror="true">
      <fileset dir="${sql.dir}/${database.type}/install">
        <include name="topology*.sql"/>
      </fileset>
    </copy>
    <touch file="${tmp.transportid.file}" />
    <concat append="true" destfile="${sql.install.atg.prd.topology}">
      <header trimleading="yes">
      	
      </header>
        --
        -- lines after this comments are dynamically generated by build script
        --    	
    </concat>
    <concat append="true" destfile="${sql.install.atg.stg.topology}">
      <header trimleading="yes">
      
      </header>
      --
      -- lines after this comments are dynamically generated by build script
      --   
    </concat>
  </target>

  <!-- runs -generate-topology-sql twice. required for live and edit counter parts -->
  <target name="-loop-generate-topology-sql">
  	<foreach list="1,2" delimiter="," trim="true" param="run" target="-generate-topology-sql" />
  </target>
	
  <!-- generate SQL that is required by the topology -->
  <target name="-generate-topology-sql">
    <loadfile property="asset.id" srcfile="${tmp.transportid.file}" />
    <math result="current.asset.id" operand1="${asset.id}" operand2="1" operation="+" datatype="int" />
    <antcall target="-generate-transport-sql">
      <param name="current.asset.id" value="${current.asset.id}" />
      <param name="current.transport.url" value="${current.transport.url}" />
    </antcall>
    <antcall target="-generate-agent-sql">
      <param name="current.asset.id" value="${current.asset.id}" />
      <param name="current.transport.url" value="${current.transport.url}" />
    </antcall>
    <antcall target="-generate-agent-mapping-sql">
      <param name="current.asset.id" value="${current.asset.id}" />
    </antcall>
  	<antcall target="-generate-principal-asset-sql">
      <param name="current.asset.id" value="${current.asset.id}" />
    </antcall>
    <concat destfile="${tmp.transportid.file}" append="false">${current.asset.id}</concat>
  </target>
  
  <!-- transport generation -->
  <target name="-generate-transport-sql">
  	<propertycopy property="destination.file" from="sql.install.atg.${destination.type}.topology" />
    <copy file="${sql.install.atg.transport.template}" tofile="${tmp.transport.sql.file}" overwrite="true" />
    <replace file="${tmp.transport.sql.file}" token="@transport_id@" value="${current.asset.id}" />
    <replace file="${tmp.transport.sql.file}" token="@transport_url@" value="${current.transport.url}" />
    <concat append="true" destfile="${destination.file}" fixlastline="true">
      <header />
      <filelist files="${tmp.transport.sql.file}" />
    </concat>
  </target>
  
  <!-- principal asset generation -->
  <target name="-generate-principal-asset-sql">
  	<propertycopy property="destination.file" from="sql.install.atg.${destination.type}.topology" />  	
    <copy file="${sql.install.atg.princasset.template}" tofile="${tmp.princasset.sql.file}" overwrite="true" />
    <replace file="${tmp.princasset.sql.file}" token="@agent_id@" value="${current.asset.id}" />
    <concat append="true" destfile="${destination.file}" fixlastline="true">
      <header />
      <filelist files="${tmp.princasset.sql.file}" />
    </concat>
  </target>

  <!-- agent mapping -->
  <target name="-generate-agent-mapping-sql">
  	<propertycopy property="destination.file" from="sql.install.atg.${destination.type}.topology" />
    <copy file="${sql.install.atg.agent.mapping.template}" tofile="${tmp.agentmap.sql.file}" overwrite="true" />
    <replace file="${tmp.agentmap.sql.file}" token="@agent_id@" value="${current.asset.id}" />
    <math result="resultMod" operand1="${current.asset.id}" operand2="2" operation="%" datatype="int" />
    <if name="resultMod" value="0">
      <propertycopy property="target.id.edit" from="global.topology.${destination.type}.target.edit" />
      <replace file="${tmp.agentmap.sql.file}" token="@target_id@" value="${target.id.edit}" />
      <else>
      	<propertycopy property="target.id.live" from="global.topology.${destination.type}.target.live" />
        <replace file="${tmp.agentmap.sql.file}" token="@target_id@" value="${target.id.live}" />
      </else>
    </if>
      <concat append="true" destfile="${destination.file}" fixlastline="true">
      <header />
      <filelist files="${tmp.agentmap.sql.file}" />
    </concat>
  </target>
  
  <!-- agent generation -->
  <target name="-generate-agent-sql">
  	<propertycopy property="destination.file" from="sql.install.atg.${destination.type}.topology" />
  	<copy file="${sql.install.atg.agent.template}" tofile="${tmp.agent.sql.file}" overwrite="true" />
    <replace file="${tmp.agent.sql.file}" token="@agent_id@" value="${current.asset.id}" />
    <replace file="${tmp.agent.sql.file}" token="@transport_url@" value="${current.transport.url}" />
    <replace file="${tmp.agent.sql.file}" token="@transport_id@" value="${current.asset.id}" />
  	<if name="destination.type" value="prd">
  	  <replace file="${tmp.agent.sql.file}" token="@environment@" value="Production" />
  	  <else>
  	    <replace file="${tmp.agent.sql.file}" token="@environment@" value="Staging" />
  	  </else>
  	</if>
    <math result="resultMod" operand1="${current.asset.id}" operand2="2" operation="%" datatype="int" />
    <math result="previous.transport.id" operand1="${current.asset.id}" operand2="1" operation="-" datatype="int" />
    <if name="resultMod" value="0">
      <replace file="${tmp.agent.sql.file}" token="@main_agent_id@" value="${previous.transport.id}" />
      <else>
        <replace file="${tmp.agent.sql.file}" token="@main_agent_id@" value="'NULL'" />
      </else>
    </if>
      <concat append="true" destfile="${destination.file}" fixlastline="true">
      <header />
      <filelist files="${tmp.agent.sql.file}" />
    </concat>
  </target>

  <!-- copy custom workflows if site is enabled -->
  <target name="-copy-custom-workflows" depends="-gettopologyconfigvalue">
    <if name="global.topology.config.value" value="true">
      <echo>copying custom workflow files</echo>
      <copy failonerror="true" todir="${prd.workflow.template.path}" verbose="true" overwrite="true">
        <fileset dir="${prd.workflow.template.path}">
          <include name="**/*.wdl.template" />
        </fileset>
      	<mapper type="glob" from="*.wdl.template" to="*.wdl" />
      </copy>
      <copy failonerror="true" todir="${stg.workflow.template.path}" verbose="true" overwrite="true">
        <fileset dir="${stg.workflow.template.path}">
          <include name="**/*.wdl.template" />
        </fileset>
      	<mapper type="glob" from="*.wdl.template" to="*.wdl" />
      </copy>
      <else>
        <echo>ignoring custom workflows</echo>
      </else>
    </if>
  </target>

  <target name="-cleanup-custom-workflow">
    <delete failonerror="true">
      <fileset dir="${prd.workflow.template.path}">
        <include name="**/*.wdl" />
      </fileset>
      <fileset dir="${stg.workflow.template.path}">
        <include name="**/*.wdl" />
      </fileset>
  	</delete>
  </target>
  
  <!-- sets various properties including flag to indicate if topology task should be executed or not -->
  <target name="-gettopologyconfigvalue" description="sets the global.topology.config.value flag">
    <condition property="topology.config.value" else="false">
      <and>
        <isset property="global.topology.config" />
        <not>
          <equals arg1="${global.topology.config}" arg2="" trim="true" />
        </not>
      </and>  
    </condition>
    <echo message="topology.config.value=${topology.config.value}" />
    <if name="topology.config.value" value="true">
      <propertycopy property="topology.config.touse.enabled" from="${global.topology.config}.enabled" />
      <propertycopy property="topology.config.touse.description" from="${global.topology.config}.description" />
      <propertycopy property="topology.config.touse.agents.prod" from="${global.topology.config}.agents.prod" />
      <propertycopy property="topology.config.touse.agents.stage" from="${global.topology.config}.agents.stage" />
      <condition property="global.topology.config.value" else="false">
        <istrue value="${topology.config.touse.enabled}" />
      </condition>
      <else>
        <condition property="global.topology.config.value" else="false">
          <istrue value="${topology.config.value}" />
        </condition>
      </else>
    </if>
  </target>  
</project>