<?xml version="1.0" ?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

 
  <display-name>Cricket E-Commerce  Replatform</display-name>

 
  <context-param>
    <param-name>atg.session.parentContextName</param-name>
    <param-value>/dyn</param-value>
  </context-param>

  <context-param>
    <param-name>atg.dafear.bootstrapContextName</param-name>
    <param-value>/dyn</param-value>
  </context-param>

  <!--
    If context-root is set here, then ServletContextWebAppRegistry will use
    this setting as the context-root for this WebApp. This must match
    the context-root setting in application.xml.
  -->
  <context-param>
    <param-name>context-root</param-name>
    <param-value>/</param-value>
  </context-param>
  
  <!--
    atg.assembler context parameter indicates that we want to execute the 
    AssemblerPiplineServlet which will use the assembler api to return content
    from Experience Manager or Guided Search.  
  -->
  <context-param>
    <param-name>atg.assembler</param-name>
    <param-value>true</param-value>
  </context-param>

  <!--
    Called when a request is for a .jsp file, the PageFilter servlet is
    the entry point into the DAF pipeline. PageFilter calls
    atg/dynamo/servlet/dafpipeline/DynamoHandler to start the DAF servlet
    pipeline for JSP requests. The DAF servlet pipeline relies on JBoss
    to handle the complete page compilation process.
  -->
  <filter>
    <filter-name>PageFilter</filter-name>
    <filter-class>atg.filter.dspjsp.PageFilter</filter-class>
  </filter>
  <filter>
    <filter-name>ForwardFilter</filter-name>
    <filter-class>atg.servlet.ForwardFilter</filter-class>
  </filter>
  <filter>
    <filter-name>ErrorFilter</filter-name>
    <filter-class>atg.servlet.ErrorFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>ErrorFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>
  <filter-mapping>
    <filter-name>ForwardFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>
  <filter-mapping>
    <filter-name>PageFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <!--
    The ADCDataInsertFilter turns on auto-tagging of pages for the
    Click To Call feature implemented by the ClickToConnect module and
    Oracle Recommendations On Demand integration feature.
    The ConditionalDelegatingFilter allows this web application to run
    whether or not the ClickToConnect or Store.Recommendations module is present.
    If you always want to run with ClickToConnect, Store.Recommendations or some other
    auto-tagging feature, you can simplify the filter tag as follows:
      <filter>
        <filter-name>ADCDataInsertFilter</filter-name>
        <filter-class>
          atg.adc.filter.ADCDataInsertFilter
        </filter-class>
      </filter>
 
  <filter>
    <filter-name>ADCDataInsertFilter</filter-name>
    <filter-class>
      atg.filter.ConditionalDelegatingFilter
    </filter-class>
    <init-param>
      <param-name>targetFilter</param-name>
      <param-value>
        atg.adc.filter.ADCDataInsertFilter
      </param-value>        
    </init-param>
    <init-param>
      <param-name>mimeTypes</param-name>
      <param-value>text/html,dynamo-internal/html</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>ADCDataInsertFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
 -->
  <!-- FOR SEO COMPLIANCE -->
  
  <servlet>
    <servlet-name>MappedJumpServlet</servlet-name>
    <servlet-class>
      atg.repository.seo.MappedJumpServlet
    </servlet-class>
    <init-param>
      <param-name>loggingDebug</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>jumpServlet</param-name>
      <param-value>
        ctx:dynamo:/atg/dynamo/servlet/dafpipeline/JumpServlet
      </param-value>
    </init-param>
  </servlet>

  <!-- 
    This servlet must be defined in each web application which is designated
    as a "main" web application (i.e. its context name is the value of
    another web application's atg.session.parentContextName parameter).  

    If you are seeing this here then this web application is being designated as 
    a parent web app.  Which means it will not share session with another 
    web application; other web applications may look to it as a parent when 
    sharing sessions.  Ensure the atg.session.parentContextName is also set 
    to the context root of this web application.

    Only uncomment this if this web application is a parent web application.

   
  -->

   <servlet>
    <servlet-name>SessionNameContextServlet</servlet-name>
    <servlet-class>atg.nucleus.servlet.SessionNameContextServlet</servlet-class>
    </servlet>

  <!--
    To use ATG platform functionality, a Web application on a 3rd party application 
    server needs to start Nucleus by invoking NucleusSerlvet. This servlet does not 
    need to have any paths mapped to it, but must have the load-on-startup flag set 
    to 1 so that it runs before any other ATG component. The NucleusServlet creates 
    an instance of Nucleus and sets it as an attribute of the web application.
  -->
  <servlet>
    <servlet-name>NucleusServlet</servlet-name>
    <servlet-class>
      atg.nucleus.servlet.NucleusServlet
    </servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--
    This servlet exposes the dynamo servlet pipeline. It is necessary if
    you want to support serving JHTML pages on your site. The context path
    and servlet path used by this servlet are prepended onto all URLs
    for JHTML pages on your site.
  -->
  <servlet>
    <servlet-name>DynamoProxyServlet</servlet-name>
    <servlet-class>
      atg.nucleus.servlet.NucleusProxyServlet
    </servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <!-- FOR SEO COMPLIANCE -->
  <servlet-mapping>
    <servlet-name>MappedJumpServlet</servlet-name>
    <url-pattern>*.jump</url-pattern>
  </servlet-mapping>

  <!-- This 'link' servlet is used by the Endeca Workbench preview invocation. -->
  <servlet>
    <servlet-name>link</servlet-name>
    <servlet-class>atg.endeca.servlet.NucleusPreviewLinkServlet</servlet-class>
    <init-param>
      <description>
        The Nucleus component path of the NavigationStateBuilder.
      </description>
      <param-name>navigationStateBuilderComponent</param-name>
      <param-value>/atg/endeca/assembler/cartridge/manager/NavigationStateBuilder</param-value>
    </init-param>
    <init-param>
      <description>
        The Nucleus component path of the ContentSource.
      </description>
      <param-name>contentSourceComponent</param-name>
      <param-value>/atg/endeca/assembler/cartridge/manager/WorkbenchContentSource</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>link</servlet-name>
    <url-pattern>/link.json/*</url-pattern>
  </servlet-mapping>
  
  <!-- 
    Dynamo ELResolver event listener allowing JSTL expressions to refer to 
    Nucleus component and dynamic bean properties (including repository item properties)   
  -->
  <listener>
    <listener-class>atg.taglib.dspjsp.RegisterELResolverServletContextListener</listener-class>
  </listener>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- the 404 error page -->
  <error-page>
    <error-code>404</error-code>
    <location>/global/pageNotFound.jsp</location>
  </error-page>
  
  <!-- the 500 error page -->
  <error-page>
    <error-code>500</error-code>
    <location>/global/serverError.jsp</location>
  </error-page>
  
  <!-- the 409 error page -->
  <error-page>
    <error-code>409</error-code>
    <location>/global/sessionExpired.jsp</location>
  </error-page>

  <!-- 
    For internal errors. This should really never happen, but just in case...
    <error-page>
      <exception-type>java.lang.Exception</exception-type>
      <location>/error.jsp</location>
    </error-page>
  -->

   <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <page-encoding>UTF-8</page-encoding>
      <scripting-invalid>true</scripting-invalid>
      <include-prelude>/includes/prelude.jspf</include-prelude>
    </jsp-property-group>
  </jsp-config>
   
<filter>
    <filter-name>CompressingFilter</filter-name>
    <filter-class>com.planetj.servlet.filter.compression.CompressingFilter</filter-class>
    <init-param>
	<param-name>includeContentTypes</param-name>
	<param-value>text/javascript,text/css,application/x-javascript,text/html</param-value>
	</init-param>
    <init-param>
	<param-name>compressionThreshold</param-name>
	<param-value>256</param-value>
	</init-param>
</filter>

<filter-mapping>
    <filter-name>CompressingFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter>
    <filter-name>imagesCache</filter-name>
    <filter-class>com.samaxes.filter.CacheFilter</filter-class>
    <init-param>
        <param-name>static</param-name>
        <param-value>true</param-value>
    </init-param>
    <init-param>
        <param-name>expirationTime</param-name>
        <param-value>2592000</param-value>
    </init-param>
</filter>
<filter>
    <filter-name>cssCache</filter-name>
    <filter-class>com.samaxes.filter.CacheFilter</filter-class>
    <init-param>
        <param-name>expirationTime</param-name>
        <param-value>604800</param-value>
    </init-param>
</filter>
<filter>
    <filter-name>jsCache</filter-name>
    <filter-class>com.samaxes.filter.CacheFilter</filter-class>
    <init-param>
        <param-name>private</param-name>
        <param-value>true</param-value>
    </init-param>
    <init-param>
        <param-name>expirationTime</param-name>
        <param-value>216000</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>cssCache</filter-name>
    <url-pattern>*.css</url-pattern>
</filter-mapping>
 
<filter-mapping>
    <filter-name>jsCache</filter-name>
    <url-pattern>*.js</url-pattern>
</filter-mapping>
 
<filter-mapping>
    <filter-name>imagesCache</filter-name>
    <url-pattern>*.png</url-pattern>
    <url-pattern>*.gif</url-pattern>
    <url-pattern>*.jpg</url-pattern>
</filter-mapping>
</web-app>
<!-- @version $Id: //hosting-blueprint/B2CBlueprint/version/10.1.2/Storefront/j2ee/store.war/WEB-INF/web.xml#5 $$Change: 722328 $-->
