<?xml version="1.0" encoding="utf-8"?><!--Created with Liquid XML Studio Developer Edition (Trial) 9.0.11.3078 (http://www.liquid-technologies.com)--><xs:schema xmlns="http://esp.cricket.com/ESP/Namespaces/Types/Public/CricketDataModel.xsd"	xmlns:xs="http://www.w3.org/2001/XMLSchema"	targetNamespace="http://esp.cricket.com/ESP/Namespaces/Types/Public/CricketDataModel.xsd"	elementFormDefault="qualified" attributeFormDefault="qualified" version="1.0.00">	<!--  History  -->	<!-- 4/14/2008	Aleksandar Memca - 1.0.00		- Initial release	-->	<!-- Schema structure -->	<!--  SIMPLE TYPES  -->	<xs:simpleType name="DateTimeWithTimezoneInfo">		<xs:annotation>			<xs:documentation>Designates a date/time stamp in UTC format. The following formats are				accepted: YYYY-MM-DDThh:mm:ss or YYYY-MM-DDThh:mm:ss.xxx Where : - YYYY indicates				the year - MM indicates the month - DD indicates the day - T is a fixed character,				indicating the time section - hh indicates the hour, zero pre-pended - mm indicates				the minute, zero pre-pended - ss indicates the second, zero pre-pended - xxx				indicates the millisecond, zero pre-pended </xs:documentation>		</xs:annotation>		<xs:restriction base="xs:dateTime">			<xs:pattern value=".+T.+"/>		</xs:restriction>	</xs:simpleType>	<xs:simpleType name="DateWithTimezoneInfo">		<xs:annotation>			<xs:documentation>Designates a date in UTC format. The following formats is accepted:				YYYY-MM-DD Where : - YYYY indicates the year - MM indicates the month - DD indicates				the day </xs:documentation>		</xs:annotation>		<xs:restriction base="xs:date">			<xs:pattern value=".+"/>		</xs:restriction>	</xs:simpleType>	<xs:simpleType name="TimeWithTimezoneInfo">		<xs:annotation>			<xs:documentation>Designates a time stamp in UTC format. The following formats are				accepted: hh:mm:ss or hh:mm:ss.xxx Where : - hh indicates the hour, zero pre-pended				- mm indicates the minute, zero pre-pended - ss indicates the second, zero				pre-pended - xxx indicates the millisecond, zero prepended </xs:documentation>		</xs:annotation>		<xs:restriction base="xs:time">			<xs:pattern value=".+"/>		</xs:restriction>	</xs:simpleType>	<xs:simpleType name="TimeZoneInfo">		<xs:annotation>			<xs:documentation>TimeZone abbreviation. Example: MDT, MST...</xs:documentation>		</xs:annotation>		<xs:restriction base="xs:string">			<xs:maxLength value="10"/>		</xs:restriction>	</xs:simpleType>	<!-- COMPLEX TYPES -->	<xs:complexType name="ESPApplicationException">		<xs:annotation>			<xs:documentation>This is the public structure that will be presented as part of a SOAP				fault</xs:documentation>		</xs:annotation>		<xs:sequence>			<xs:element name="Response" type="ResponseInfo"/>			<xs:element name="ServiceEntityFault" type="ServiceEntityFaultInfo"				maxOccurs="unbounded"/>			<xs:element name="GEHSubstitutionVariables" type="NameValuePairInfo" minOccurs="0"				maxOccurs="unbounded"/>		</xs:sequence>	</xs:complexType>	<xs:complexType name="MessageHeaderSecurity">		<xs:sequence>			<xs:element name="userName" type="xs:string">				<xs:annotation>					<xs:documentation>The user name that will be used for						authentication/authorization</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="userPassword" type="xs:string">				<xs:annotation>					<xs:documentation>The password that will be used for						authentication/authorization</xs:documentation>				</xs:annotation>			</xs:element>		</xs:sequence>	</xs:complexType>	<xs:complexType name="MessageHeaderSequence">		<xs:sequence>			<xs:element name="sequenceNumber" type="xs:string">				<xs:annotation>					<xs:documentation>The sequence number of the current messages as part of a						series of messages. For example if one request results in multiple responses						then each response will have a different sequence number since they are all						part of the same request.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="totalInSequence" type="xs:string">				<xs:annotation>					<xs:documentation>The total number of messages as part of a series of messages.						For example if one request results in multiple responses then each response						will contain the total number of messages since they are all part of the						same request.</xs:documentation>				</xs:annotation>			</xs:element>		</xs:sequence>	</xs:complexType>	<xs:complexType name="MessageHeaderTracking">		<xs:sequence>			<xs:element name="version" type="xs:string" fixed="v1">				<xs:annotation>					<xs:documentation>This element designates the ESP version for the interaction.						The message header is combined with the actual payload in a JMS message or a						SOAP message, hence the entire interaction is versioned using this						parameter. </xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="originalVersion" type="xs:string" minOccurs="0">				<xs:annotation>					<xs:documentation>This element designates the ESP version for the original						request the client passed in. This field should not be populated by the						client and it is only used if multiple versions of the software are						supported in production at the same time. </xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="messageId" type="xs:string">				<xs:annotation>					<xs:documentation>This is a unique message identifier (UUID) for each message. A						number (GUID) generator can be used for this.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="responseTo" type="xs:string" minOccurs="0">				<xs:annotation>					<xs:documentation>If the message is sent as a response to some "request" then						this field must contain the messageId of the original "request"						message.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="returnURL" type="xs:string" minOccurs="0">				<xs:annotation>					<xs:documentation>Identifies the URL to which any asynchronous response to this						message should be delivered.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="timeToLive" type="xs:integer" minOccurs="0">				<xs:annotation>					<xs:documentation>The maximum time in seconds the receiving entity should try to						process this message. Values may be limited by receiving						entity.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="conversationId" type="xs:string" minOccurs="0">				<xs:annotation>					<xs:documentation>If this message is part of a larger transaction or part of a						series of messages all of which are part of the same "session" then this						field must be used to designate that transaction/session. This ID will be						uniquely identified and will be the same for all messages that participate						in the transaction/session. If a client wants to a conversation they can use						the Echo request to receive a conversation id which can later be used for						all requests that are part of the same session.</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="dateTimeStamp" type="DateTimeWithTimezoneInfo">				<xs:annotation>					<xs:documentation>See underlying type for details on the format expected.					</xs:documentation>				</xs:annotation>			</xs:element>		</xs:sequence>	</xs:complexType>	<xs:complexType name="NameValuePairInfo">		<xs:sequence>			<xs:element name="name" type="xs:string"/>			<xs:element name="value" type="xs:string" minOccurs="0"/>		</xs:sequence>	</xs:complexType>	<xs:complexType name="ResponseInfo">		<xs:sequence>			<xs:element name="code" type="xs:string"/>			<xs:element name="description" type="xs:string"/>		</xs:sequence>	</xs:complexType>	<xs:complexType name="ServiceEntityFaultInfo">		<xs:annotation>			<xs:documentation>Fault information generated by some backend system will be formatted				with this type.</xs:documentation>		</xs:annotation>		<xs:sequence>			<xs:element name="reportingServiceEntity" type="xs:string"/>			<xs:element name="faultTimestamp" type="DateTimeWithTimezoneInfo"/>			<xs:element name="faultSequenceNumber" type="xs:string" minOccurs="0"/>			<xs:element name="faultLevel" type="xs:string"/>			<xs:element name="faultCode" type="xs:string"/>			<xs:element name="faultDescription" type="xs:string"/>		</xs:sequence>	</xs:complexType></xs:schema>